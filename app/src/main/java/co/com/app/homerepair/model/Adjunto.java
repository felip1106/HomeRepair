package co.com.app.homerepair.model;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.com.app.homerepair.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.com.app.homerepair.dao.AdjuntoDao;
import co.com.app.homerepair.dao.AdjuntoSolicitudDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ADJUNTO".
 */
@Entity(active = true)
public class Adjunto {

    @Id(autoincrement = true)
    private Long id;
    private byte[] adj_img;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient AdjuntoDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "adj_id")
    })
    private List<AdjuntoSolicitud> adjuntosSolicitud;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Adjunto() {
    }

    public Adjunto(Long id) {
        this.id = id;
    }

    @Generated
    public Adjunto(Long id, byte[] adj_img) {
        this.id = id;
        this.adj_img = adj_img;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdjuntoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public byte[] getAdj_img() {
        return adj_img;
    }

    public void setAdj_img(byte[] adj_img) {
        this.adj_img = adj_img;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<AdjuntoSolicitud> getAdjuntosSolicitud() {
        if (adjuntosSolicitud == null) {
            __throwIfDetached();
            AdjuntoSolicitudDao targetDao = daoSession.getAdjuntoSolicitudDao();
            List<AdjuntoSolicitud> adjuntosSolicitudNew = targetDao._queryAdjunto_AdjuntosSolicitud(id);
            synchronized (this) {
                if(adjuntosSolicitud == null) {
                    adjuntosSolicitud = adjuntosSolicitudNew;
                }
            }
        }
        return adjuntosSolicitud;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAdjuntosSolicitud() {
        adjuntosSolicitud = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
