package co.com.app.homerepair.model;

import org.greenrobot.greendao.annotation.*;

import co.com.app.homerepair.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.com.app.homerepair.dao.AdjuntoDao;
import co.com.app.homerepair.dao.AdjuntoSolicitudDao;
import co.com.app.homerepair.dao.SolicitudDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ADJUNTO_SOLICITUD".
 */
@Entity(active = true)
public class AdjuntoSolicitud {

    @Id
    private Long id;

    @Unique
    @Index
    private Long sol_id;

    @Unique
    @Index
    private Long adj_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient AdjuntoSolicitudDao myDao;

    @ToOne(joinProperty = "sol_id")
    private Solicitud solicitud;

    @Generated
    private transient Long solicitud__resolvedKey;

    @ToOne(joinProperty = "adj_id")
    private Adjunto adjunto;

    @Generated
    private transient Long adjunto__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public AdjuntoSolicitud() {
    }

    public AdjuntoSolicitud(Long id) {
        this.id = id;
    }

    @Generated
    public AdjuntoSolicitud(Long id, Long sol_id, Long adj_id) {
        this.id = id;
        this.sol_id = sol_id;
        this.adj_id = adj_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAdjuntoSolicitudDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getSol_id() {
        return sol_id;
    }

    public void setSol_id(Long sol_id) {
        this.sol_id = sol_id;
    }

    public Long getAdj_id() {
        return adj_id;
    }

    public void setAdj_id(Long adj_id) {
        this.adj_id = adj_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Solicitud getSolicitud() {
        Long __key = this.sol_id;
        if (solicitud__resolvedKey == null || !solicitud__resolvedKey.equals(__key)) {
            __throwIfDetached();
            SolicitudDao targetDao = daoSession.getSolicitudDao();
            Solicitud solicitudNew = targetDao.load(__key);
            synchronized (this) {
                solicitud = solicitudNew;
            	solicitud__resolvedKey = __key;
            }
        }
        return solicitud;
    }

    @Generated
    public void setSolicitud(Solicitud solicitud) {
        synchronized (this) {
            this.solicitud = solicitud;
            sol_id = solicitud == null ? null : solicitud.getId();
            solicitud__resolvedKey = sol_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Adjunto getAdjunto() {
        Long __key = this.adj_id;
        if (adjunto__resolvedKey == null || !adjunto__resolvedKey.equals(__key)) {
            __throwIfDetached();
            AdjuntoDao targetDao = daoSession.getAdjuntoDao();
            Adjunto adjuntoNew = targetDao.load(__key);
            synchronized (this) {
                adjunto = adjuntoNew;
            	adjunto__resolvedKey = __key;
            }
        }
        return adjunto;
    }

    @Generated
    public void setAdjunto(Adjunto adjunto) {
        synchronized (this) {
            this.adjunto = adjunto;
            adj_id = adjunto == null ? null : adjunto.getId();
            adjunto__resolvedKey = adj_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
