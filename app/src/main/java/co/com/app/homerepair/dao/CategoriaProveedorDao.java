package co.com.app.homerepair.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

import co.com.app.homerepair.model.Categoria;
import co.com.app.homerepair.model.CategoriaProveedor;
import co.com.app.homerepair.model.Proveedor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CATEGORIA_PROVEEDOR".
*/
public class CategoriaProveedorDao extends AbstractDao<CategoriaProveedor, Long> {

    public static final String TABLENAME = "CATEGORIA_PROVEEDOR";

    /**
     * Properties of entity CategoriaProveedor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cat_id = new Property(1, Long.class, "cat_id", false, "CAT_ID");
        public final static Property Prov_id = new Property(2, Long.class, "prov_id", false, "PROV_ID");
    }

    private DaoSession daoSession;

    private Query<CategoriaProveedor> categoria_CategoriasProveedorQuery;
    private Query<CategoriaProveedor> proveedor_CategoriasProveedorQuery;

    public CategoriaProveedorDao(DaoConfig config) {
        super(config);
    }
    
    public CategoriaProveedorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORIA_PROVEEDOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CAT_ID\" INTEGER UNIQUE ," + // 1: cat_id
                "\"PROV_ID\" INTEGER UNIQUE );"); // 2: prov_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CATEGORIA_PROVEEDOR_CAT_ID ON CATEGORIA_PROVEEDOR" +
                " (\"CAT_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_CATEGORIA_PROVEEDOR_PROV_ID ON CATEGORIA_PROVEEDOR" +
                " (\"PROV_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORIA_PROVEEDOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoriaProveedor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long cat_id = entity.getCat_id();
        if (cat_id != null) {
            stmt.bindLong(2, cat_id);
        }
 
        Long prov_id = entity.getProv_id();
        if (prov_id != null) {
            stmt.bindLong(3, prov_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoriaProveedor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long cat_id = entity.getCat_id();
        if (cat_id != null) {
            stmt.bindLong(2, cat_id);
        }
 
        Long prov_id = entity.getProv_id();
        if (prov_id != null) {
            stmt.bindLong(3, prov_id);
        }
    }

    @Override
    protected final void attachEntity(CategoriaProveedor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CategoriaProveedor readEntity(Cursor cursor, int offset) {
        CategoriaProveedor entity = new CategoriaProveedor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cat_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // prov_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CategoriaProveedor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCat_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProv_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CategoriaProveedor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CategoriaProveedor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CategoriaProveedor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "categoriasProveedor" to-many relationship of Categoria. */
    public List<CategoriaProveedor> _queryCategoria_CategoriasProveedor(Long cat_id) {
        synchronized (this) {
            if (categoria_CategoriasProveedorQuery == null) {
                QueryBuilder<CategoriaProveedor> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cat_id.eq(null));
                categoria_CategoriasProveedorQuery = queryBuilder.build();
            }
        }
        Query<CategoriaProveedor> query = categoria_CategoriasProveedorQuery.forCurrentThread();
        query.setParameter(0, cat_id);
        return query.list();
    }

    /** Internal query to resolve the "categoriasProveedor" to-many relationship of Proveedor. */
    public List<CategoriaProveedor> _queryProveedor_CategoriasProveedor(Long prov_id) {
        synchronized (this) {
            if (proveedor_CategoriasProveedorQuery == null) {
                QueryBuilder<CategoriaProveedor> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Prov_id.eq(null));
                proveedor_CategoriasProveedorQuery = queryBuilder.build();
            }
        }
        Query<CategoriaProveedor> query = proveedor_CategoriasProveedorQuery.forCurrentThread();
        query.setParameter(0, prov_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoriaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProveedorDao().getAllColumns());
            builder.append(" FROM CATEGORIA_PROVEEDOR T");
            builder.append(" LEFT JOIN CATEGORIA T0 ON T.\"CAT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PROVEEDOR T1 ON T.\"PROV_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CategoriaProveedor loadCurrentDeep(Cursor cursor, boolean lock) {
        CategoriaProveedor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Categoria categoria = loadCurrentOther(daoSession.getCategoriaDao(), cursor, offset);
        entity.setCategoria(categoria);
        offset += daoSession.getCategoriaDao().getAllColumns().length;

        Proveedor proveedor = loadCurrentOther(daoSession.getProveedorDao(), cursor, offset);
        entity.setProveedor(proveedor);

        return entity;    
    }

    public CategoriaProveedor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CategoriaProveedor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CategoriaProveedor> list = new ArrayList<CategoriaProveedor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CategoriaProveedor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CategoriaProveedor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
