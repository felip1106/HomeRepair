package co.com.app.homerepair.model;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.annotation.ToOne;

import java.util.List;

import co.com.app.homerepair.dao.ActividadEconomicaDao;
import co.com.app.homerepair.dao.CategoriaProveedorDao;
import co.com.app.homerepair.dao.CotizacionDao;
import co.com.app.homerepair.dao.DaoSession;
import co.com.app.homerepair.dao.ProveedorDao;
import co.com.app.homerepair.dao.UsuariosDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PROVEEDOR".
 */
@Entity(active = true)
public class Proveedor {

    @Id
    private Long id;
    private String prov_rzocial;
    private String prov_email;
    private String prov_tel;
    private String prov_direccion;
    private String prov_estado;
    private Long prov_ae_id;
    private Long prov_usu_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ProveedorDao myDao;

    @ToOne(joinProperty = "prov_ae_id")
    private ActividadEconomica actividadEconomica;

    @Generated
    private transient Long actividadEconomica__resolvedKey;

    @ToOne(joinProperty = "prov_usu_id")
    private Usuarios usuarios;

    @Generated
    private transient Long usuarios__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "prov_id")
    })
    private List<CategoriaProveedor> categoriasProveedor;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "cot_prov_id")
    })
    private List<Cotizacion> cotizaciones;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Proveedor() {
    }

    public Proveedor(Long id) {
        this.id = id;
    }

    @Generated
    public Proveedor(Long id, String prov_rzocial, String prov_email, String prov_tel, String prov_direccion, String prov_estado, Long prov_ae_id, Long prov_usu_id) {
        this.id = id;
        this.prov_rzocial = prov_rzocial;
        this.prov_email = prov_email;
        this.prov_tel = prov_tel;
        this.prov_direccion = prov_direccion;
        this.prov_estado = prov_estado;
        this.prov_ae_id = prov_ae_id;
        this.prov_usu_id = prov_usu_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProveedorDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getProv_rzocial() {
        return prov_rzocial;
    }

    public void setProv_rzocial(String prov_rzocial) {
        this.prov_rzocial = prov_rzocial;
    }

    public String getProv_email() {
        return prov_email;
    }

    public void setProv_email(String prov_email) {
        this.prov_email = prov_email;
    }

    public String getProv_tel() {
        return prov_tel;
    }

    public void setProv_tel(String prov_tel) {
        this.prov_tel = prov_tel;
    }

    public String getProv_direccion() {
        return prov_direccion;
    }

    public void setProv_direccion(String prov_direccion) {
        this.prov_direccion = prov_direccion;
    }

    public String getProv_estado() {
        return prov_estado;
    }

    public void setProv_estado(String prov_estado) {
        this.prov_estado = prov_estado;
    }

    public Long getProv_ae_id() {
        return prov_ae_id;
    }

    public void setProv_ae_id(Long prov_ae_id) {
        this.prov_ae_id = prov_ae_id;
    }

    public Long getProv_usu_id() {
        return prov_usu_id;
    }

    public void setProv_usu_id(Long prov_usu_id) {
        this.prov_usu_id = prov_usu_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ActividadEconomica getActividadEconomica() {
        Long __key = this.prov_ae_id;
        if (actividadEconomica__resolvedKey == null || !actividadEconomica__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ActividadEconomicaDao targetDao = daoSession.getActividadEconomicaDao();
            ActividadEconomica actividadEconomicaNew = targetDao.load(__key);
            synchronized (this) {
                actividadEconomica = actividadEconomicaNew;
            	actividadEconomica__resolvedKey = __key;
            }
        }
        return actividadEconomica;
    }

    @Generated
    public void setActividadEconomica(ActividadEconomica actividadEconomica) {
        synchronized (this) {
            this.actividadEconomica = actividadEconomica;
            prov_ae_id = actividadEconomica == null ? null : actividadEconomica.getId();
            actividadEconomica__resolvedKey = prov_ae_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Usuarios getUsuarios() {
        Long __key = this.prov_usu_id;
        if (usuarios__resolvedKey == null || !usuarios__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UsuariosDao targetDao = daoSession.getUsuariosDao();
            Usuarios usuariosNew = targetDao.load(__key);
            synchronized (this) {
                usuarios = usuariosNew;
            	usuarios__resolvedKey = __key;
            }
        }
        return usuarios;
    }

    @Generated
    public void setUsuarios(Usuarios usuarios) {
        synchronized (this) {
            this.usuarios = usuarios;
            prov_usu_id = usuarios == null ? null : usuarios.getId();
            usuarios__resolvedKey = prov_usu_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<CategoriaProveedor> getCategoriasProveedor() {
        if (categoriasProveedor == null) {
            __throwIfDetached();
            CategoriaProveedorDao targetDao = daoSession.getCategoriaProveedorDao();
            List<CategoriaProveedor> categoriasProveedorNew = targetDao._queryProveedor_CategoriasProveedor(id);
            synchronized (this) {
                if(categoriasProveedor == null) {
                    categoriasProveedor = categoriasProveedorNew;
                }
            }
        }
        return categoriasProveedor;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCategoriasProveedor() {
        categoriasProveedor = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Cotizacion> getCotizaciones() {
        if (cotizaciones == null) {
            __throwIfDetached();
            CotizacionDao targetDao = daoSession.getCotizacionDao();
            List<Cotizacion> cotizacionesNew = targetDao._queryProveedor_Cotizaciones(id);
            synchronized (this) {
                if(cotizaciones == null) {
                    cotizaciones = cotizacionesNew;
                }
            }
        }
        return cotizaciones;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCotizaciones() {
        cotizaciones = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
