package co.com.app.homerepair.model;

import org.greenrobot.greendao.annotation.*;

import co.com.app.homerepair.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.com.app.homerepair.dao.CategoriaDao;
import co.com.app.homerepair.dao.CategoriaProveedorDao;
import co.com.app.homerepair.dao.ProveedorDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CATEGORIA_PROVEEDOR".
 */
@Entity(active = true)
public class CategoriaProveedor {

    @Id
    private Long id;

    @Unique
    @Index
    private Long cat_id;

    @Unique
    @Index
    private Long prov_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CategoriaProveedorDao myDao;

    @ToOne(joinProperty = "cat_id")
    private Categoria categoria;

    @Generated
    private transient Long categoria__resolvedKey;

    @ToOne(joinProperty = "prov_id")
    private Proveedor proveedor;

    @Generated
    private transient Long proveedor__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public CategoriaProveedor() {
    }

    public CategoriaProveedor(Long id) {
        this.id = id;
    }

    @Generated
    public CategoriaProveedor(Long id, Long cat_id, Long prov_id) {
        this.id = id;
        this.cat_id = cat_id;
        this.prov_id = prov_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoriaProveedorDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCat_id() {
        return cat_id;
    }

    public void setCat_id(Long cat_id) {
        this.cat_id = cat_id;
    }

    public Long getProv_id() {
        return prov_id;
    }

    public void setProv_id(Long prov_id) {
        this.prov_id = prov_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Categoria getCategoria() {
        Long __key = this.cat_id;
        if (categoria__resolvedKey == null || !categoria__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CategoriaDao targetDao = daoSession.getCategoriaDao();
            Categoria categoriaNew = targetDao.load(__key);
            synchronized (this) {
                categoria = categoriaNew;
            	categoria__resolvedKey = __key;
            }
        }
        return categoria;
    }

    @Generated
    public void setCategoria(Categoria categoria) {
        synchronized (this) {
            this.categoria = categoria;
            cat_id = categoria == null ? null : categoria.getId();
            categoria__resolvedKey = cat_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Proveedor getProveedor() {
        Long __key = this.prov_id;
        if (proveedor__resolvedKey == null || !proveedor__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ProveedorDao targetDao = daoSession.getProveedorDao();
            Proveedor proveedorNew = targetDao.load(__key);
            synchronized (this) {
                proveedor = proveedorNew;
            	proveedor__resolvedKey = __key;
            }
        }
        return proveedor;
    }

    @Generated
    public void setProveedor(Proveedor proveedor) {
        synchronized (this) {
            this.proveedor = proveedor;
            prov_id = proveedor == null ? null : proveedor.getId();
            proveedor__resolvedKey = prov_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
