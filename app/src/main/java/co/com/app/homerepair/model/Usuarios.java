package co.com.app.homerepair.model;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.com.app.homerepair.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.com.app.homerepair.dao.ClientesDao;
import co.com.app.homerepair.dao.ComentarioDao;
import co.com.app.homerepair.dao.ProveedorDao;
import co.com.app.homerepair.dao.RolDao;
import co.com.app.homerepair.dao.UsuariosDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USUARIOS".
 */
@Entity(active = true)
public class Usuarios {

    @Id(autoincrement = true)
    private Long id;
    private String usu_nombre;
    private String usu_pass;
    private byte[] usu_img_perfil;
    private String usu_estado;
    private Long usu_rol_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UsuariosDao myDao;

    @ToOne(joinProperty = "usu_rol_id")
    private Rol rol;

    @Generated
    private transient Long rol__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "cl_usu_id")
    })
    private List<Clientes> clientes;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "prov_usu_id")
    })
    private List<Proveedor> proveedores;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "ctrio_usu_id")
    })
    private List<Comentario> comentario;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Usuarios() {
    }

    public Usuarios(Long id) {
        this.id = id;
    }

    @Generated
    public Usuarios(Long id, String usu_nombre, String usu_pass, byte[] usu_img_perfil, String usu_estado, Long usu_rol_id) {
        this.id = id;
        this.usu_nombre = usu_nombre;
        this.usu_pass = usu_pass;
        this.usu_img_perfil = usu_img_perfil;
        this.usu_estado = usu_estado;
        this.usu_rol_id = usu_rol_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsuariosDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsu_nombre() {
        return usu_nombre;
    }

    public void setUsu_nombre(String usu_nombre) {
        this.usu_nombre = usu_nombre;
    }

    public String getUsu_pass() {
        return usu_pass;
    }

    public void setUsu_pass(String usu_pass) {
        this.usu_pass = usu_pass;
    }

    public byte[] getUsu_img_perfil() {
        return usu_img_perfil;
    }

    public void setUsu_img_perfil(byte[] usu_img_perfil) {
        this.usu_img_perfil = usu_img_perfil;
    }

    public String getUsu_estado() {
        return usu_estado;
    }

    public void setUsu_estado(String usu_estado) {
        this.usu_estado = usu_estado;
    }

    public Long getUsu_rol_id() {
        return usu_rol_id;
    }

    public void setUsu_rol_id(Long usu_rol_id) {
        this.usu_rol_id = usu_rol_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Rol getRol() {
        Long __key = this.usu_rol_id;
        if (rol__resolvedKey == null || !rol__resolvedKey.equals(__key)) {
            __throwIfDetached();
            RolDao targetDao = daoSession.getRolDao();
            Rol rolNew = targetDao.load(__key);
            synchronized (this) {
                rol = rolNew;
            	rol__resolvedKey = __key;
            }
        }
        return rol;
    }

    @Generated
    public void setRol(Rol rol) {
        synchronized (this) {
            this.rol = rol;
            usu_rol_id = rol == null ? null : rol.getId();
            rol__resolvedKey = usu_rol_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Clientes> getClientes() {
        if (clientes == null) {
            __throwIfDetached();
            ClientesDao targetDao = daoSession.getClientesDao();
            List<Clientes> clientesNew = targetDao._queryUsuarios_Clientes(id);
            synchronized (this) {
                if(clientes == null) {
                    clientes = clientesNew;
                }
            }
        }
        return clientes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetClientes() {
        clientes = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Proveedor> getProveedores() {
        if (proveedores == null) {
            __throwIfDetached();
            ProveedorDao targetDao = daoSession.getProveedorDao();
            List<Proveedor> proveedoresNew = targetDao._queryUsuarios_Proveedores(id);
            synchronized (this) {
                if(proveedores == null) {
                    proveedores = proveedoresNew;
                }
            }
        }
        return proveedores;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetProveedores() {
        proveedores = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Comentario> getComentario() {
        if (comentario == null) {
            __throwIfDetached();
            ComentarioDao targetDao = daoSession.getComentarioDao();
            List<Comentario> comentarioNew = targetDao._queryUsuarios_Comentario(id);
            synchronized (this) {
                if(comentario == null) {
                    comentario = comentarioNew;
                }
            }
        }
        return comentario;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetComentario() {
        comentario = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
