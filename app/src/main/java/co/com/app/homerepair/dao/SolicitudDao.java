package co.com.app.homerepair.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

import co.com.app.homerepair.model.Categoria;
import co.com.app.homerepair.model.Clientes;
import co.com.app.homerepair.model.EstadoSolicitud;
import co.com.app.homerepair.model.Solicitud;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SOLICITUD".
*/
public class SolicitudDao extends AbstractDao<Solicitud, Long> {

    public static final String TABLENAME = "SOLICITUD";

    /**
     * Properties of entity Solicitud.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sol_descripcion = new Property(1, String.class, "sol_descripcion", false, "SOL_DESCRIPCION");
        public final static Property Sol_calificacion = new Property(2, Integer.class, "sol_calificacion", false, "SOL_CALIFICACION");
        public final static Property Sol_cl_id = new Property(3, Long.class, "sol_cl_id", false, "SOL_CL_ID");
        public final static Property Sol_estsol_id = new Property(4, Long.class, "sol_estsol_id", false, "SOL_ESTSOL_ID");
        public final static Property Sol_cat_id = new Property(5, Long.class, "sol_cat_id", false, "SOL_CAT_ID");
    }

    private DaoSession daoSession;

    private Query<Solicitud> clientes_SolicitudesQuery;
    private Query<Solicitud> estadoSolicitud_SolicitudesQuery;
    private Query<Solicitud> categoria_SolicitudesQuery;

    public SolicitudDao(DaoConfig config) {
        super(config);
    }
    
    public SolicitudDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOLICITUD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SOL_DESCRIPCION\" TEXT," + // 1: sol_descripcion
                "\"SOL_CALIFICACION\" INTEGER," + // 2: sol_calificacion
                "\"SOL_CL_ID\" INTEGER," + // 3: sol_cl_id
                "\"SOL_ESTSOL_ID\" INTEGER," + // 4: sol_estsol_id
                "\"SOL_CAT_ID\" INTEGER);"); // 5: sol_cat_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOLICITUD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Solicitud entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sol_descripcion = entity.getSol_descripcion();
        if (sol_descripcion != null) {
            stmt.bindString(2, sol_descripcion);
        }
 
        Integer sol_calificacion = entity.getSol_calificacion();
        if (sol_calificacion != null) {
            stmt.bindLong(3, sol_calificacion);
        }
 
        Long sol_cl_id = entity.getSol_cl_id();
        if (sol_cl_id != null) {
            stmt.bindLong(4, sol_cl_id);
        }
 
        Long sol_estsol_id = entity.getSol_estsol_id();
        if (sol_estsol_id != null) {
            stmt.bindLong(5, sol_estsol_id);
        }
 
        Long sol_cat_id = entity.getSol_cat_id();
        if (sol_cat_id != null) {
            stmt.bindLong(6, sol_cat_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Solicitud entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sol_descripcion = entity.getSol_descripcion();
        if (sol_descripcion != null) {
            stmt.bindString(2, sol_descripcion);
        }
 
        Integer sol_calificacion = entity.getSol_calificacion();
        if (sol_calificacion != null) {
            stmt.bindLong(3, sol_calificacion);
        }
 
        Long sol_cl_id = entity.getSol_cl_id();
        if (sol_cl_id != null) {
            stmt.bindLong(4, sol_cl_id);
        }
 
        Long sol_estsol_id = entity.getSol_estsol_id();
        if (sol_estsol_id != null) {
            stmt.bindLong(5, sol_estsol_id);
        }
 
        Long sol_cat_id = entity.getSol_cat_id();
        if (sol_cat_id != null) {
            stmt.bindLong(6, sol_cat_id);
        }
    }

    @Override
    protected final void attachEntity(Solicitud entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Solicitud readEntity(Cursor cursor, int offset) {
        Solicitud entity = new Solicitud( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sol_descripcion
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sol_calificacion
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // sol_cl_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // sol_estsol_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // sol_cat_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Solicitud entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSol_descripcion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSol_calificacion(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSol_cl_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSol_estsol_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSol_cat_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Solicitud entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Solicitud entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Solicitud entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "solicitudes" to-many relationship of Clientes. */
    public List<Solicitud> _queryClientes_Solicitudes(Long sol_cl_id) {
        synchronized (this) {
            if (clientes_SolicitudesQuery == null) {
                QueryBuilder<Solicitud> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sol_cl_id.eq(null));
                clientes_SolicitudesQuery = queryBuilder.build();
            }
        }
        Query<Solicitud> query = clientes_SolicitudesQuery.forCurrentThread();
        query.setParameter(0, sol_cl_id);
        return query.list();
    }

    /** Internal query to resolve the "solicitudes" to-many relationship of EstadoSolicitud. */
    public List<Solicitud> _queryEstadoSolicitud_Solicitudes(Long sol_estsol_id) {
        synchronized (this) {
            if (estadoSolicitud_SolicitudesQuery == null) {
                QueryBuilder<Solicitud> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sol_estsol_id.eq(null));
                estadoSolicitud_SolicitudesQuery = queryBuilder.build();
            }
        }
        Query<Solicitud> query = estadoSolicitud_SolicitudesQuery.forCurrentThread();
        query.setParameter(0, sol_estsol_id);
        return query.list();
    }

    /** Internal query to resolve the "solicitudes" to-many relationship of Categoria. */
    public List<Solicitud> _queryCategoria_Solicitudes(Long sol_cat_id) {
        synchronized (this) {
            if (categoria_SolicitudesQuery == null) {
                QueryBuilder<Solicitud> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Sol_cat_id.eq(null));
                categoria_SolicitudesQuery = queryBuilder.build();
            }
        }
        Query<Solicitud> query = categoria_SolicitudesQuery.forCurrentThread();
        query.setParameter(0, sol_cat_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClientesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getEstadoSolicitudDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCategoriaDao().getAllColumns());
            builder.append(" FROM SOLICITUD T");
            builder.append(" LEFT JOIN CLIENTES T0 ON T.\"SOL_CL_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ESTADO_SOLICITUD T1 ON T.\"SOL_ESTSOL_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN CATEGORIA T2 ON T.\"SOL_CAT_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Solicitud loadCurrentDeep(Cursor cursor, boolean lock) {
        Solicitud entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Clientes clientes = loadCurrentOther(daoSession.getClientesDao(), cursor, offset);
        entity.setClientes(clientes);
        offset += daoSession.getClientesDao().getAllColumns().length;

        EstadoSolicitud estadoSolicitud = loadCurrentOther(daoSession.getEstadoSolicitudDao(), cursor, offset);
        entity.setEstadoSolicitud(estadoSolicitud);
        offset += daoSession.getEstadoSolicitudDao().getAllColumns().length;

        Categoria categoria = loadCurrentOther(daoSession.getCategoriaDao(), cursor, offset);
        entity.setCategoria(categoria);

        return entity;    
    }

    public Solicitud loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Solicitud> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Solicitud> list = new ArrayList<Solicitud>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Solicitud> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Solicitud> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
