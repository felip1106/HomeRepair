package co.com.app.homerepair.model;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;

import java.util.List;

import co.com.app.homerepair.dao.DaoSession;
import co.com.app.homerepair.dao.RolDao;
import co.com.app.homerepair.dao.UsuariosDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ROL".
 */
@Entity(active = true)
public class Rol {

    @Id
    private Long id;
    private String rol_nombre;
    private String rol_estado;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient RolDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "usu_rol_id")
    })
    private List<Usuarios> usuarios;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Rol() {
    }

    public Rol(Long id) {
        this.id = id;
    }

    @Generated
    public Rol(Long id, String rol_nombre, String rol_estado) {
        this.id = id;
        this.rol_nombre = rol_nombre;
        this.rol_estado = rol_estado;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRolDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRol_nombre() {
        return rol_nombre;
    }

    public void setRol_nombre(String rol_nombre) {
        this.rol_nombre = rol_nombre;
    }

    public String getRol_estado() {
        return rol_estado;
    }

    public void setRol_estado(String rol_estado) {
        this.rol_estado = rol_estado;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Usuarios> getUsuarios() {
        if (usuarios == null) {
            __throwIfDetached();
            UsuariosDao targetDao = daoSession.getUsuariosDao();
            List<Usuarios> usuariosNew = targetDao._queryRol_Usuarios(id);
            synchronized (this) {
                if(usuarios == null) {
                    usuarios = usuariosNew;
                }
            }
        }
        return usuarios;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetUsuarios() {
        usuarios = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
