package co.com.app.homerepair.model;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import co.com.app.homerepair.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.com.app.homerepair.dao.CategoriaDao;
import co.com.app.homerepair.dao.CategoriaProveedorDao;
import co.com.app.homerepair.dao.SolicitudDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CATEGORIA".
 */
@Entity(active = true)
public class Categoria {

    @Id
    private Long id;
    private String cat_descripcion;
    private String cat_estado;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CategoriaDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "cat_id")
    })
    private List<CategoriaProveedor> categoriasProveedor;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "sol_cat_id")
    })
    private List<Solicitud> solicitudes;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Categoria() {
    }

    public Categoria(Long id) {
        this.id = id;
    }

    @Generated
    public Categoria(Long id, String cat_descripcion, String cat_estado) {
        this.id = id;
        this.cat_descripcion = cat_descripcion;
        this.cat_estado = cat_estado;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoriaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCat_descripcion() {
        return cat_descripcion;
    }

    public void setCat_descripcion(String cat_descripcion) {
        this.cat_descripcion = cat_descripcion;
    }

    public String getCat_estado() {
        return cat_estado;
    }

    public void setCat_estado(String cat_estado) {
        this.cat_estado = cat_estado;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<CategoriaProveedor> getCategoriasProveedor() {
        if (categoriasProveedor == null) {
            __throwIfDetached();
            CategoriaProveedorDao targetDao = daoSession.getCategoriaProveedorDao();
            List<CategoriaProveedor> categoriasProveedorNew = targetDao._queryCategoria_CategoriasProveedor(id);
            synchronized (this) {
                if(categoriasProveedor == null) {
                    categoriasProveedor = categoriasProveedorNew;
                }
            }
        }
        return categoriasProveedor;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCategoriasProveedor() {
        categoriasProveedor = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Solicitud> getSolicitudes() {
        if (solicitudes == null) {
            __throwIfDetached();
            SolicitudDao targetDao = daoSession.getSolicitudDao();
            List<Solicitud> solicitudesNew = targetDao._queryCategoria_Solicitudes(id);
            synchronized (this) {
                if(solicitudes == null) {
                    solicitudes = solicitudesNew;
                }
            }
        }
        return solicitudes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetSolicitudes() {
        solicitudes = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
