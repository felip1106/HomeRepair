package co.com.app.homerepair.model;

import org.greenrobot.greendao.annotation.*;

import co.com.app.homerepair.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import co.com.app.homerepair.dao.ComentarioDao;
import co.com.app.homerepair.dao.SolicitudDao;
import co.com.app.homerepair.dao.UsuariosDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "COMENTARIO".
 */
@Entity(active = true)
public class Comentario {

    @Id(autoincrement = true)
    private Long id;
    private String ctrio_descripcion;
    private Long ctrio_sol_id;
    private Long ctrio_usu_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ComentarioDao myDao;

    @ToOne(joinProperty = "ctrio_sol_id")
    private Solicitud solicitud;

    @Generated
    private transient Long solicitud__resolvedKey;

    @ToOne(joinProperty = "ctrio_usu_id")
    private Usuarios usuarios;

    @Generated
    private transient Long usuarios__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Comentario() {
    }

    public Comentario(Long id) {
        this.id = id;
    }

    @Generated
    public Comentario(Long id, String ctrio_descripcion, Long ctrio_sol_id, Long ctrio_usu_id) {
        this.id = id;
        this.ctrio_descripcion = ctrio_descripcion;
        this.ctrio_sol_id = ctrio_sol_id;
        this.ctrio_usu_id = ctrio_usu_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getComentarioDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCtrio_descripcion() {
        return ctrio_descripcion;
    }

    public void setCtrio_descripcion(String ctrio_descripcion) {
        this.ctrio_descripcion = ctrio_descripcion;
    }

    public Long getCtrio_sol_id() {
        return ctrio_sol_id;
    }

    public void setCtrio_sol_id(Long ctrio_sol_id) {
        this.ctrio_sol_id = ctrio_sol_id;
    }

    public Long getCtrio_usu_id() {
        return ctrio_usu_id;
    }

    public void setCtrio_usu_id(Long ctrio_usu_id) {
        this.ctrio_usu_id = ctrio_usu_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Solicitud getSolicitud() {
        Long __key = this.ctrio_sol_id;
        if (solicitud__resolvedKey == null || !solicitud__resolvedKey.equals(__key)) {
            __throwIfDetached();
            SolicitudDao targetDao = daoSession.getSolicitudDao();
            Solicitud solicitudNew = targetDao.load(__key);
            synchronized (this) {
                solicitud = solicitudNew;
            	solicitud__resolvedKey = __key;
            }
        }
        return solicitud;
    }

    @Generated
    public void setSolicitud(Solicitud solicitud) {
        synchronized (this) {
            this.solicitud = solicitud;
            ctrio_sol_id = solicitud == null ? null : solicitud.getId();
            solicitud__resolvedKey = ctrio_sol_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Usuarios getUsuarios() {
        Long __key = this.ctrio_usu_id;
        if (usuarios__resolvedKey == null || !usuarios__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UsuariosDao targetDao = daoSession.getUsuariosDao();
            Usuarios usuariosNew = targetDao.load(__key);
            synchronized (this) {
                usuarios = usuariosNew;
            	usuarios__resolvedKey = __key;
            }
        }
        return usuarios;
    }

    @Generated
    public void setUsuarios(Usuarios usuarios) {
        synchronized (this) {
            this.usuarios = usuarios;
            ctrio_usu_id = usuarios == null ? null : usuarios.getId();
            usuarios__resolvedKey = ctrio_usu_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
