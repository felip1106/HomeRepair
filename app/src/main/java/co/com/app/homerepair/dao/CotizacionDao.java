package co.com.app.homerepair.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

import co.com.app.homerepair.model.Clientes;
import co.com.app.homerepair.model.Cotizacion;
import co.com.app.homerepair.model.Proveedor;
import co.com.app.homerepair.model.Solicitud;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COTIZACION".
*/
public class CotizacionDao extends AbstractDao<Cotizacion, Long> {

    public static final String TABLENAME = "COTIZACION";

    /**
     * Properties of entity Cotizacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cot_valor = new Property(1, String.class, "cot_valor", false, "COT_VALOR");
        public final static Property Cot_estado = new Property(2, String.class, "cot_estado", false, "COT_ESTADO");
        public final static Property Cot_cl_id = new Property(3, long.class, "cot_cl_id", false, "COT_CL_ID");
        public final static Property Cot_prov_id = new Property(4, Long.class, "cot_prov_id", false, "COT_PROV_ID");
        public final static Property Cot_sol_id = new Property(5, Long.class, "cot_sol_id", false, "COT_SOL_ID");
    }

    private DaoSession daoSession;

    private Query<Cotizacion> clientes_CotizacionesQuery;
    private Query<Cotizacion> proveedor_CotizacionesQuery;
    private Query<Cotizacion> solicitud_CotizacionesQuery;

    public CotizacionDao(DaoConfig config) {
        super(config);
    }
    
    public CotizacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COTIZACION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COT_VALOR\" TEXT," + // 1: cot_valor
                "\"COT_ESTADO\" TEXT," + // 2: cot_estado
                "\"COT_CL_ID\" INTEGER NOT NULL ," + // 3: cot_cl_id
                "\"COT_PROV_ID\" INTEGER," + // 4: cot_prov_id
                "\"COT_SOL_ID\" INTEGER);"); // 5: cot_sol_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COTIZACION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cotizacion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cot_valor = entity.getCot_valor();
        if (cot_valor != null) {
            stmt.bindString(2, cot_valor);
        }
 
        String cot_estado = entity.getCot_estado();
        if (cot_estado != null) {
            stmt.bindString(3, cot_estado);
        }
        stmt.bindLong(4, entity.getCot_cl_id());
 
        Long cot_prov_id = entity.getCot_prov_id();
        if (cot_prov_id != null) {
            stmt.bindLong(5, cot_prov_id);
        }
 
        Long cot_sol_id = entity.getCot_sol_id();
        if (cot_sol_id != null) {
            stmt.bindLong(6, cot_sol_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cotizacion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cot_valor = entity.getCot_valor();
        if (cot_valor != null) {
            stmt.bindString(2, cot_valor);
        }
 
        String cot_estado = entity.getCot_estado();
        if (cot_estado != null) {
            stmt.bindString(3, cot_estado);
        }
        stmt.bindLong(4, entity.getCot_cl_id());
 
        Long cot_prov_id = entity.getCot_prov_id();
        if (cot_prov_id != null) {
            stmt.bindLong(5, cot_prov_id);
        }
 
        Long cot_sol_id = entity.getCot_sol_id();
        if (cot_sol_id != null) {
            stmt.bindLong(6, cot_sol_id);
        }
    }

    @Override
    protected final void attachEntity(Cotizacion entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cotizacion readEntity(Cursor cursor, int offset) {
        Cotizacion entity = new Cotizacion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cot_valor
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cot_estado
            cursor.getLong(offset + 3), // cot_cl_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // cot_prov_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // cot_sol_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cotizacion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCot_valor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCot_estado(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCot_cl_id(cursor.getLong(offset + 3));
        entity.setCot_prov_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCot_sol_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cotizacion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cotizacion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cotizacion entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cotizaciones" to-many relationship of Clientes. */
    public List<Cotizacion> _queryClientes_Cotizaciones(long cot_cl_id) {
        synchronized (this) {
            if (clientes_CotizacionesQuery == null) {
                QueryBuilder<Cotizacion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cot_cl_id.eq(null));
                clientes_CotizacionesQuery = queryBuilder.build();
            }
        }
        Query<Cotizacion> query = clientes_CotizacionesQuery.forCurrentThread();
        query.setParameter(0, cot_cl_id);
        return query.list();
    }

    /** Internal query to resolve the "cotizaciones" to-many relationship of Proveedor. */
    public List<Cotizacion> _queryProveedor_Cotizaciones(Long cot_prov_id) {
        synchronized (this) {
            if (proveedor_CotizacionesQuery == null) {
                QueryBuilder<Cotizacion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cot_prov_id.eq(null));
                proveedor_CotizacionesQuery = queryBuilder.build();
            }
        }
        Query<Cotizacion> query = proveedor_CotizacionesQuery.forCurrentThread();
        query.setParameter(0, cot_prov_id);
        return query.list();
    }

    /** Internal query to resolve the "cotizaciones" to-many relationship of Solicitud. */
    public List<Cotizacion> _querySolicitud_Cotizaciones(Long cot_sol_id) {
        synchronized (this) {
            if (solicitud_CotizacionesQuery == null) {
                QueryBuilder<Cotizacion> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cot_sol_id.eq(null));
                solicitud_CotizacionesQuery = queryBuilder.build();
            }
        }
        Query<Cotizacion> query = solicitud_CotizacionesQuery.forCurrentThread();
        query.setParameter(0, cot_sol_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClientesDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getProveedorDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getSolicitudDao().getAllColumns());
            builder.append(" FROM COTIZACION T");
            builder.append(" LEFT JOIN CLIENTES T0 ON T.\"COT_CL_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PROVEEDOR T1 ON T.\"COT_PROV_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN SOLICITUD T2 ON T.\"COT_SOL_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Cotizacion loadCurrentDeep(Cursor cursor, boolean lock) {
        Cotizacion entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Clientes clientes = loadCurrentOther(daoSession.getClientesDao(), cursor, offset);
         if(clientes != null) {
            entity.setClientes(clientes);
        }
        offset += daoSession.getClientesDao().getAllColumns().length;

        Proveedor proveedor = loadCurrentOther(daoSession.getProveedorDao(), cursor, offset);
        entity.setProveedor(proveedor);
        offset += daoSession.getProveedorDao().getAllColumns().length;

        Solicitud solicitud = loadCurrentOther(daoSession.getSolicitudDao(), cursor, offset);
        entity.setSolicitud(solicitud);

        return entity;    
    }

    public Cotizacion loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Cotizacion> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Cotizacion> list = new ArrayList<Cotizacion>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Cotizacion> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Cotizacion> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
