package co.com.app.homerepair.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.ArrayList;
import java.util.List;

import co.com.app.homerepair.model.Clientes;
import co.com.app.homerepair.model.Usuarios;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CLIENTES".
*/
public class ClientesDao extends AbstractDao<Clientes, Long> {

    public static final String TABLENAME = "CLIENTES";

    /**
     * Properties of entity Clientes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cl_nombre = new Property(1, String.class, "cl_nombre", false, "CL_NOMBRE");
        public final static Property Cl_apellidos = new Property(2, String.class, "cl_apellidos", false, "CL_APELLIDOS");
        public final static Property Cl_email = new Property(3, String.class, "cl_email", false, "CL_EMAIL");
        public final static Property Cl_telefono = new Property(4, String.class, "cl_telefono", false, "CL_TELEFONO");
        public final static Property Cl_direccion = new Property(5, String.class, "cl_direccion", false, "CL_DIRECCION");
        public final static Property Cl_fecha_naci = new Property(6, String.class, "cl_fecha_naci", false, "CL_FECHA_NACI");
        public final static Property Cl_estado = new Property(7, String.class, "cl_estado", false, "CL_ESTADO");
        public final static Property Cl_usu_id = new Property(8, long.class, "cl_usu_id", false, "CL_USU_ID");
    }

    private DaoSession daoSession;

    private Query<Clientes> usuarios_ClientesQuery;

    public ClientesDao(DaoConfig config) {
        super(config);
    }
    
    public ClientesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLIENTES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CL_NOMBRE\" TEXT NOT NULL ," + // 1: cl_nombre
                "\"CL_APELLIDOS\" TEXT NOT NULL ," + // 2: cl_apellidos
                "\"CL_EMAIL\" TEXT," + // 3: cl_email
                "\"CL_TELEFONO\" TEXT," + // 4: cl_telefono
                "\"CL_DIRECCION\" TEXT," + // 5: cl_direccion
                "\"CL_FECHA_NACI\" TEXT," + // 6: cl_fecha_naci
                "\"CL_ESTADO\" TEXT," + // 7: cl_estado
                "\"CL_USU_ID\" INTEGER NOT NULL );"); // 8: cl_usu_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLIENTES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clientes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCl_nombre());
        stmt.bindString(3, entity.getCl_apellidos());
 
        String cl_email = entity.getCl_email();
        if (cl_email != null) {
            stmt.bindString(4, cl_email);
        }
 
        String cl_telefono = entity.getCl_telefono();
        if (cl_telefono != null) {
            stmt.bindString(5, cl_telefono);
        }
 
        String cl_direccion = entity.getCl_direccion();
        if (cl_direccion != null) {
            stmt.bindString(6, cl_direccion);
        }
 
        String cl_fecha_naci = entity.getCl_fecha_naci();
        if (cl_fecha_naci != null) {
            stmt.bindString(7, cl_fecha_naci);
        }
 
        String cl_estado = entity.getCl_estado();
        if (cl_estado != null) {
            stmt.bindString(8, cl_estado);
        }
        stmt.bindLong(9, entity.getCl_usu_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clientes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCl_nombre());
        stmt.bindString(3, entity.getCl_apellidos());
 
        String cl_email = entity.getCl_email();
        if (cl_email != null) {
            stmt.bindString(4, cl_email);
        }
 
        String cl_telefono = entity.getCl_telefono();
        if (cl_telefono != null) {
            stmt.bindString(5, cl_telefono);
        }
 
        String cl_direccion = entity.getCl_direccion();
        if (cl_direccion != null) {
            stmt.bindString(6, cl_direccion);
        }
 
        String cl_fecha_naci = entity.getCl_fecha_naci();
        if (cl_fecha_naci != null) {
            stmt.bindString(7, cl_fecha_naci);
        }
 
        String cl_estado = entity.getCl_estado();
        if (cl_estado != null) {
            stmt.bindString(8, cl_estado);
        }
        stmt.bindLong(9, entity.getCl_usu_id());
    }

    @Override
    protected final void attachEntity(Clientes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Clientes readEntity(Cursor cursor, int offset) {
        Clientes entity = new Clientes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // cl_nombre
            cursor.getString(offset + 2), // cl_apellidos
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cl_email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cl_telefono
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cl_direccion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cl_fecha_naci
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cl_estado
            cursor.getLong(offset + 8) // cl_usu_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clientes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCl_nombre(cursor.getString(offset + 1));
        entity.setCl_apellidos(cursor.getString(offset + 2));
        entity.setCl_email(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCl_telefono(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCl_direccion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCl_fecha_naci(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCl_estado(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCl_usu_id(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Clientes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Clientes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Clientes entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "clientes" to-many relationship of Usuarios. */
    public List<Clientes> _queryUsuarios_Clientes(long cl_usu_id) {
        synchronized (this) {
            if (usuarios_ClientesQuery == null) {
                QueryBuilder<Clientes> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cl_usu_id.eq(null));
                usuarios_ClientesQuery = queryBuilder.build();
            }
        }
        Query<Clientes> query = usuarios_ClientesQuery.forCurrentThread();
        query.setParameter(0, cl_usu_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUsuariosDao().getAllColumns());
            builder.append(" FROM CLIENTES T");
            builder.append(" LEFT JOIN USUARIOS T0 ON T.\"CL_USU_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Clientes loadCurrentDeep(Cursor cursor, boolean lock) {
        Clientes entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Usuarios usuarios = loadCurrentOther(daoSession.getUsuariosDao(), cursor, offset);
         if(usuarios != null) {
            entity.setUsuarios(usuarios);
        }

        return entity;    
    }

    public Clientes loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Clientes> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Clientes> list = new ArrayList<Clientes>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Clientes> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Clientes> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
